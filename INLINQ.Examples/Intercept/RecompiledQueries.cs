//Generated on 26/01/2024 22:26:46
//Do not edit this file directly since it was generated using RecompileAssembly().
using INLINQ.Core.Interface;
using INLINQ.Core.Recompile;
using INLINQ.Core.Logic.Helpers;
using System.Runtime.CompilerServices;
namespace Recompiled
{
	public static class RecompiledQueries
	{
#if RECOMPILE
// do not intercept
#else

        [InterceptsLocation(@"C:\Users\Pascal\source\repos\INLINQ.Examples\INLINQ.Examples\Performance\BenchmarksCompare.cs", line: 52, column: 26)]
        public static Boolean Intercept1<TSource>(this IEnumerable<TSource> source, Func<TSource,Boolean> predicate)
        {
            var paras = INLINQ.Core.Generated.InLinqGenerated.GetReaderParameters(source);
            return RecompiledQueries.Recompiled1(paras);
        }

		private static Boolean Recompiled1(ReaderParameters parameters)
		{
			//Range().Select(id => new TestObject(Convert(id, Int64), Convert((id * 3), Int64), Convert((1 + (100 * id)), Int64))).All(x => (x.Value > 0))
			Tuple<Int32,Int32> startCount;
			Int32 rowValue;
			Int32 countRemaining;
			Int32 T1_Value;
			Int32 processedCount;
			Int64 T2_Id;
			Int64 T2_NameCode;
			Int64 T2_Value;
			processedCount = default;
			startCount = (Tuple<int, int>)parameters.Parameters[0];
			rowValue = startCount.Item1;
			countRemaining = startCount.Item2;
			rowValue += processedCount;
			countRemaining -= processedCount;
			while(countRemaining > 0)
			{
				T1_Value = rowValue;
				rowValue++;
				countRemaining--;
				processedCount++;
				T2_Id = (System.Int64)T1_Value;
				T2_NameCode = (System.Int64)(T1_Value * 3);
				T2_Value = (System.Int64)(1 + (100 * T1_Value));
				if(!((T2_Value > 0))) return false;
			}
			return true;
		}


#endif
	}
}


